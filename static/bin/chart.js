// Generated by CoffeeScript 1.9.3
(function() {
  var Chart, generate_data,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Chart = (function() {
    function Chart() {
      this.draw_left_axis = bind(this.draw_left_axis, this);
      this.vertical_padding = 100;
      this.horizontal_padding = 40;
      this.width = 1200 - this.vertical_padding * 2;
      this.height = 2000 - this.horizontal_padding * 2;
    }

    Chart.prototype.render = function(el, data) {
      var color, layered_data, svg, x, xmax, y;
      svg = d3.select('#svg-container').append('svg').style('width', this.width + this.vertical_padding * 2).style('height', this.height + this.horizontal_padding * 2).append('g').attr('transform', "translate( " + this.vertical_padding + ", " + this.horizontal_padding + " )");
      layered_data = ["a", "b", "c"].map(function(keyword) {
        return data.map(function(entry) {
          return {
            x: entry.key,
            y: entry[keyword]
          };
        });
      });
      d3.layout.stack()(layered_data);
      xmax = d3.max(layered_data[layered_data.length - 1], function(entry) {
        return entry.y0 + entry.y;
      });
      x = d3.scale.linear().range([0, this.width]).domain([0, xmax]);
      y = d3.scale.ordinal().rangeBands([0, this.height], 0.5).domain(data.map(function(entry, idx) {
        return idx;
      }));
      color = d3.scale.ordinal().range(["#B7D5E2", "#29ABE2", "#196687"]);
      this.draw_top_axis(svg, x);
      this.draw_left_axis(svg, y, layered_data[0]);
      return this.draw_bars(svg, layered_data, x, y, color);
    };

    Chart.prototype.draw_top_axis = function(svg, x) {
      var top_axis;
      top_axis = svg.selectAll('.top_axis').data(x.ticks(10)).enter().append('g').attr('class', 'top_axis').attr('transform', function(d) {
        return "translate(" + (x(d)) + ", 0)";
      });
      top_axis.append('line').attr('y2', this.height).style('stroke', 'gray');
      top_axis.append('text').attr("dx", "-.5em").attr("dy", "-.5em").text(function(d) {
        return d;
      });
      return svg.append('text').attr('transform', "translate(" + this.width + ", -20)").text('# of members').style('font-weight', 'bold');
    };

    Chart.prototype.draw_left_axis = function(svg, y, data) {
      var left_axis;
      left_axis = svg.selectAll('.left_axis').data(data).enter().append('g').attr('class', 'left_axis').attr('transform', (function(_this) {
        return function(d, idx) {
          return "translate(" + (-_this.vertical_padding + 5) + ", " + (y(idx) + 20) + ")";
        };
      })(this));
      return left_axis.append('text').text(function(d) {
        return d.x;
      });
    };

    Chart.prototype.draw_legend = function() {
      return "ok";
    };

    Chart.prototype.draw_bars = function(svg, data, x, y, color) {
      var g_groups, rect;
      g_groups = svg.selectAll('.g_groups').data(data).enter().append('g').attr('class', 'g_groups').style('fill', function(d, i) {
        return color(i);
      });
      return rect = g_groups.selectAll('rect').data(function(d) {
        return d;
      }).enter().append('rect').attr('x', function(d) {
        return x(d.y0);
      }).attr('y', function(d, idx) {
        return y(idx);
      }).attr('width', function(d) {
        return x(d.y);
      }).attr('height', y.rangeBand());
    };

    return Chart;

  })();

  generate_data = function() {
    var data, i, j;
    data = [];
    for (i = j = 0; j < 30; i = ++j) {
      data.push({
        key: "Access group " + (i + 1),
        a: Math.random() * 10 + 10,
        b: Math.random() * 50 + 50,
        c: Math.random() * 50 + 20
      });
    }
    return data;
  };

  window.Chart = Chart;

  window.generate_data = generate_data;

}).call(this);

//# sourceMappingURL=chart.js.map
